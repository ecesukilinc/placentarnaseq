#BSUB -J filter_map[1-72]
#BSUB -W 48:00
#BSUB -o /rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/out/Output_%J_%I.out
#BSUB -e /rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/out/Output_%J_%I.out
#BSUB -q long 
#BSUB -n 1 			# Request all procs
#BSUB -M 50			# Maximum!
#BSUB -R rusage[mem=50]
#BSUB -u EKilinc@mdanderson.org	# This is useful for error reporting
## explanation of arguments above:
## -J arbitrary job name
## -W wallclock in hour:min
## -o use this or output (stdout) will be sent via email!
## -e use this or errors (stderr) will be sent via email!
## -q queue name (short is the default)
## -n min_proc[,max_proc]  number of processors required (28=entire node)
## -M memory in GB 
## -R memory in GB 
## -u EmailAddress

module load R/4.3.1
module load python/3.11.3_numpy-1.24.3

##For trimming
#module load pychopper/2.7.9
#eval "$(/risapps/rhel8/miniconda3/py39_4.12.0/bin/conda shell.bash hook)"
#conda activate pychopper-2.7.9
source /rsrch5/home/neuro_rsrch/ekilinc/miniforge3/etc/profile.d/conda.sh
conda activate /rsrch5/home/neuro_rsrch/ekilinc/miniforge3/envs/NanoLift

cd /rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/

Rscript mergeFastq_040324.R --sample $LSB_JOBINDEX

sampleID=$(head -n $LSB_JOBINDEX /rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/sampleID.tsv | tail -n 1)
sampleID=SampleID_$sampleID

out_pass=/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/pass/$sampleID.fastq.gz
#out_trim=/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/trim/$sampleID.fastq.gz
#out_trim_un=/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/trim/$sampleID.fastq
#pychopper_out=/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/trim/$sampleID.pychopper.fastq.gz
#pychopper_temp=/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/trim/$sampleID.pychopper.fastq

##TRIMMING

##Pychopper

#if [ ! -f "$pychopper_out" ]; then
#   zcat "$out_pass" | pychopper \
#                        -r "$out_pass.report.pdf" \
#                        -u "$out_pass.unclassified.fastq" \
#                        -w "$out_pass.rescued.fastq" \
#                        "$out_pass" \
#                        "$pychopper_temp"
#   gzip -c "$pychopper_temp" > "$pychopper_out"
#   rm "$pychopper_out"
#else 
#   echo "Pychopper output file $pychopper_out already exists"
#fi

##NanoFilt

# if [ ! -f "$out_trim" ]; then
#     zcat "$out_pass" | NanoFilt -l 200 -q 7 >> "$out_trim_un"
#     gzip -c "$out_trim_un" > "$out_trim"
#     rm "$out_trim_un"
# else
#     echo "Trimmed FASTQ file $out_trim already exists."
# fi 


##Alignment

bam_folder=/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/bam/
sam_folder=/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/sam/
ref='/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/ref/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna'

export ref

aln_out=$sam_folder/$sampleID.sam
bam_out=$bam_folder/$sampleID.bam
bam_sorted=$bam_folder/$sampleID.sorted.bam

minimap2 -ax splice --splice-flank=no -w 4 -k 14 $ref $out_pass > $aln_out

samtools view -S -b $aln_out > $bam_out
samtools sort $bam_out -o $bam_sorted
rm $bam_out
samtools index $bam_sorted

if [$? -ne 0 ]; then
     echo "Minimap2 encountered an error."
     exit 1
 else
     echo "Minimap2 works."
fi

conda deactivate