#BSUB -J map
#BSUB -W 48:00
#BSUB -o /rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/merged/out
#BSUB -e /rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/merged/out
#BSUB -q long 
#BSUB -n 1 			# Request all procs
#BSUB -M 50			# Maximum!
#BSUB -R rusage[mem=50]
#BSUB -u EKilinc@mdanderson.org	# This is useful for error reporting
## explanation of arguments above:
## -J arbitrary job name
## -W wallclock in hour:min
## -o use this or output (stdout) will be sent via email!
## -e use this or errors (stderr) will be sent via email!
## -q queue name (short is the default)
## -n min_proc[,max_proc]  number of processors required (28=entire node)
## -M memory in GB 
## -R memory in GB 
## -u EmailAddress

module load minimap2
eval "$(/risapps/rhel8/miniconda3/py39_4.12.0/bin/conda shell.bash hook)"
module load samtools
eval "$(/risapps/rhel8/miniconda3/py39_4.12.0/bin/conda shell.bash hook)"
conda activate minimap2-2.24


cd /rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/

bam_folder=/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/merged/bam
sam_folder=/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/merged/sam
fastq_file='/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/placenta_trial/pass/combined.fastq.gz'
ref='/rsrch5/scratch/neuro_rsrch/ekilinc/lnrnatrial/ref/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna'

export ref

base_name=$(basename "$fastq_file" .fastq.gz)
sam_out="${sam_folder}/${base_name}.sam"
bam_out="${bam_folder}/${base_name}.bam"
bam_sorted="${bam_folder}/${base_name}.sorted.bam"

minimap2 -ax splice --splice-flank=no -w 4 -k 14 $ref $fastq_file > $sam_out

conda deactivate

conda activate samtools-1.16.1

samtools view -S -b $sam_out > $bam_out
samtools sort $bam_out -o $bam_sorted
rm $bam_out
samtools index $bam_sorted

if [$? -ne 0 ]; then
     echo "Minimap2 encountered an error."
     exit 1
 else
     echo "Minimap2 works."
fi

conda deactivate
conda deactivate