#BSUB -J espresso_c[1-49]
#BSUB -W 100:00
#BSUB -o /rsrch5/home/epi/bhattacharya_lab/download/out/Output_%J_%I.out
#BSUB -e /rsrch5/home/epi/bhattacharya_lab/download/out/Output_%J_%I.err 
#BSUB -q long 
#BSUB -n 5 			# Request all procs
#BSUB -M 160			# Maximum!
#BSUB -R rusage[mem=160]
#BSUB -u abhattacharya3@mdanderson.org	# This is useful for error reporting
## explanation of arguments above:
## -J arbitrary job name
## -W wallclock in hour:min
## -o use this or output (stdout) will be sent via email!
## -e use this or errors (stderr) will be sent via email!
## -q queue name (short is the default)
## -n min_proc[,max_proc]  number of processors required (28=entire node)
## -M memory in GB 
## -R memory in GB 
## -u EmailAddress

module add python/3.11.3
module add samtools
eval "$(/risapps/rhel8/miniconda3/py39_4.12.0/bin/conda shell.bash hook)"
conda activate samtools-1.16.1
module load R/4.3.1
module load minimap2
conda activate minimap2-2.24 --stack

cd /rsrch5/scratch/epi/abhattacharya3/flair_out/chunks
assembly_file='/rsrch5/home/epi/bhattacharya_lab/projects/placenta_mapqtl/reference/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna'
gtf_file='/rsrch5/home/epi/bhattacharya_lab/projects/placenta_mapqtl/reference/gencode.v44.annotation.gtf'
tra_fa_file='/rsrch5/home/epi/bhattacharya_lab/projects/placenta_mapqtl/reference/gencode.v44.transcripts.fa'

array=( $( ls . ) )

chr_out=${array[$LSB_JOBINDEX-1]}
bed_in=$chr_out
base=`basename $chr_out .bed`
fq_file=/rsrch5/scratch/epi/abhattacharya3/all_reads_combined.fastq.gz

flair collapse -g $assembly_file --gtf $gtf_file -q $bed_in -r $fq_file \
--stringent --check_splice --generate_map --annotation_reliant generate --threads 5 \
--output /rsrch5/scratch/epi/abhattacharya3/flair_out/${base}.flaircollapse